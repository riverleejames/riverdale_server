version: '3.8'

services:
  # Init container to create required directories
  init-directories:
    image: alpine:latest
    container_name: init-directories
    volumes:
      - ${MEDIA_ROOT}:/media
      - ${DOWNLOADS_ROOT}:/downloads
      - ${CONFIG_ROOT}:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    command: >
      sh -c "
        echo 'Creating required directories...'
        mkdir -p /media/movies /media/tv
        mkdir -p /downloads/complete/movies /downloads/complete/tv /downloads/complete/tv-sonarr /downloads/complete/radarr
        mkdir -p /downloads/incomplete
        mkdir -p /downloads/watch
        mkdir -p /config/jellyfin /config/sonarr /config/radarr /config/prowlarr /config/transmission /config/gluetun /config/watchtower /config/dashy /config/traefik
        chown -R \$${PUID}:\$${PGID} /media /downloads /config 2>/dev/null || true
        chmod -R 755 /media /downloads /config 2>/dev/null || true
        echo 'Directory structure ready!'
      "
    user: "0:0"  # Run as root to ensure directory creation works
    restart: "no"

  # VPN Container - All torrent traffic goes through this
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "${TRANSMISSION_PORT}:9091"  # Transmission Web UI
      - "51413:51413"    # Transmission torrent port
      - "51413:51413/udp"  # Transmission torrent port UDP
    volumes:
      - ${CONFIG_ROOT}/gluetun:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
      - FIREWALL_OUTBOUND_SUBNETS=192.168.0.0/16,172.16.0.0/12,10.0.0.0/8
      - TZ=${TZ}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Transmission - Torrent client (runs through VPN)
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: "service:gluetun"  # Use gluetun's network (VPN)
    depends_on:
      - gluetun
      - init-directories
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${USERNAME}
      - PASS=${PASSWORD}
    volumes:
      - ${CONFIG_ROOT}/transmission:/config
      - ${DOWNLOADS_ROOT}:/downloads
      - ${DOWNLOADS_ROOT}/watch:/watch
    restart: unless-stopped

  # Jellyfin - Media Server
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    depends_on:
      - init-directories
    group_add:
      - "992"  # Allow access to video devices for hardware acceleration (render group)
    ports:
      - "${JELLYFIN_PORT}:8096"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/jellyfin:/config
      - ${MEDIA_ROOT}:/media
      - /tmp:/tmp
      - /tmp/jellyfin:/cache/transcodes
    # Intel QuickSync hardware acceleration
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card1:/dev/dri/card1
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.river.local`)"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  # Sonarr - TV Show management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    depends_on:
      - init-directories
    ports:
      - "${SONARR_PORT}:8989"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/sonarr:/config
      - ${MEDIA_ROOT}/tv:/tv
      - ${DOWNLOADS_ROOT}:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.river.local`)"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  # Radarr - Movie management
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    depends_on:
      - init-directories
    ports:
      - "${RADARR_PORT}:7878"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/radarr:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${DOWNLOADS_ROOT}:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.river.local`)"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  # Prowlarr - Indexer management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "${PROWLARR_PORT}:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/prowlarr:/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.river.local`)"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # Daily at 4:00 AM
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL:-}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_ROOT}/watchtower:/config
    restart: unless-stopped

  # Dashy - Dashboard for all services
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    depends_on:
      - init-directories
    ports:
      - "${DASHY_PORT:-4000}:8080"  # Changed from port 80 to 4000 to avoid conflict with Traefik
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - NODE_ENV=production
      - UID=${PUID}
      - GID=${PGID}
    volumes:
      - ${CONFIG_ROOT}/dashy:/app/user-data
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashy.rule=Host(`dashy.river.local`)"
      - "traefik.http.services.dashy.loadbalancer.server.port=8080"

  # Glances - System monitoring
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    ports:
      - "${GLANCES_PORT:-61208}:61208"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - GLANCES_OPT=-w
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro
    pid: host
    privileged: true
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glances.rule=Host(`glances.river.local`)"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"

  # Traefik - Reverse Proxy
  traefik:
    image: traefik:latest
    container_name: traefik
    ports:
      - "8080:8080"  # Traefik dashboard
    environment:
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_ROOT}/traefik:/etc/traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --log.level=INFO
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.river.local`)"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # whoami - Simple service for testing Traefik
  whoami:
    image: traefik/whoami:latest
    container_name: whoami
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.river.local`)"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"

networks:
  default:
    name: riverdale_network