services:
  # VPN Container - All torrent traffic goes through this
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    ports:
      - "${TRANSMISSION_PORT}:9091"  # Transmission Web UI
      - "51413:51413"                # Transmission torrent port
      - "51413:51413/udp"            # Transmission torrent port UDP
    volumes:
      - ${CONFIG_ROOT}/gluetun:/gluetun
    environment:
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      # OpenVPN Configuration
      - OPENVPN_USER=${OPENVPN_USER}
      - OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
      - OPENVPN_PROTOCOL=${OPENVPN_PROTOCOL:-udp}
      - SERVER_HOSTNAMES=${SERVER_HOSTNAMES}
      # Server location settings
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
      # Network and firewall settings
      - FIREWALL_OUTBOUND_SUBNETS=192.168.0.0/16,172.16.0.0/12,10.0.0.0/8
      - TZ=${TZ}
      # Logging level
      - LOG_LEVEL=info
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 90s

  # Transmission - Torrent client (runs through VPN)
  transmission:
    image: lscr.io/linuxserver/transmission:latest
    container_name: transmission
    network_mode: "service:gluetun"  # Use gluetun's network (VPN)
    depends_on:
      gluetun:
        condition: service_healthy
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - USER=${USERNAME}
      - PASS=${PASSWORD}
    volumes:
      - ${CONFIG_ROOT}/transmission:/config
      - ${DOWNLOADS_ROOT}:/downloads
      - ${DOWNLOADS_ROOT}/watch:/watch
    restart: unless-stopped

  # Flood - Modern UI for Transmission
  flood:
    image: jesec/flood:latest
    container_name: flood
    depends_on:
      gluetun:
        condition: service_healthy
      transmission:
        condition: service_started
    ports:
      - "${FLOOD_PORT:-3000}:3000"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - FLOOD_OPTION_HOST=0.0.0.0
      - FLOOD_OPTION_PORT=3000
      - FLOOD_OPTION_ALLOWEDPATH=${DOWNLOADS_ROOT}
    volumes:
      - ${CONFIG_ROOT}/flood:/data
      - ${DOWNLOADS_ROOT}:/downloads
    user: "${PUID}:${PGID}"
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.flood.rule=Host(`flood.river.local`)"
      - "traefik.http.routers.flood.entrypoints=web"
      - "traefik.http.services.flood.loadbalancer.server.port=3000"

  # Jellyfin - Media Server
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    group_add:
      - "992"  # Allow access to video devices for hardware acceleration (render group)
    ports:
      - "${JELLYFIN_PORT}:8096"
      - "7359:7359"  # Discovery port
      - "1900:1900/udp"  # Discovery port for SSDP
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - JELLYFIN_PublishedServerUrl=http://jellyfin.river.local  # For discovery
      - DOCKER_MODS=linuxserver/mods:jellyfin-opencl-intel
    volumes:
      - ${CONFIG_ROOT}/jellyfin:/config
      - ${MEDIA_ROOT}:/media:ro  # Read-only media access
      - /tmp/jellyfin:/cache/transcodes
    # Intel QuickSync hardware acceleration
    devices:
      - /dev/dri:/dev/dri # For Intel QuickSync
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8096/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.river.local`)"
      - "traefik.http.routers.jellyfin.entrypoints=web"
      - "traefik.http.services.jellyfin.loadbalancer.server.port=8096"

  # Sonarr - TV Show management
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    ports:
      - "${SONARR_PORT}:8989"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/sonarr:/config
      - ${MEDIA_ROOT}/tv:/tv
      - ${DOWNLOADS_ROOT}:/downloads
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8989/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.river.local`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  # Radarr - Movie management
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    ports:
      - "${RADARR_PORT}:7878"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/radarr:/config
      - ${MEDIA_ROOT}/movies:/movies
      - ${DOWNLOADS_ROOT}:/downloads
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7878/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.river.local`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  # Prowlarr - Indexer management
  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    ports:
      - "${PROWLARR_PORT}:9696"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONFIG_ROOT}/prowlarr:/config
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9696/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.river.local`)"
      - "traefik.http.routers.prowlarr.entrypoints=web"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  # Watchtower - Automatic container updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false  # Don't update stopped containers
      - WATCHTOWER_SCHEDULE=0 0 4 * * *  # Daily at 4:00 AM
      - WATCHTOWER_NOTIFICATIONS=shoutrrr
      - WATCHTOWER_NOTIFICATION_URL=${WATCHTOWER_NOTIFICATION_URL:-}
      - WATCHTOWER_ROLLING_RESTART=true  # Restart one at a time
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_ROOT}/watchtower:/config
    restart: unless-stopped
    networks:
      - riverdale_network

  # Dashy - Dashboard for all services
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    ports:
      - "${DASHY_PORT:-4000}:8080"  # Changed from port 80 to 4000 to avoid conflict with Traefik
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - NODE_ENV=production
      - UID=${PUID}
      - GID=${PGID}
    volumes:
      - ${CONFIG_ROOT}/dashy:/app/user-data
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashy.rule=Host(`dashy.river.local`)"
      - "traefik.http.routers.dashy.entrypoints=web"
      - "traefik.http.services.dashy.loadbalancer.server.port=8080"

  # Glances - System monitoring
  glances:
    image: nicolargo/glances:latest
    container_name: glances
    ports:
      - "${GLANCES_PORT:-61208}:61208"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - GLANCES_OPT=-w
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/etc/os-release:ro
    group_add:
      - "${PGID}"      # Add user group for file access
      - "109"          # Docker group for socket access
    pid: host
    privileged: true  # Still needed for system monitoring
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:61208/api/3/config || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.glances.rule=Host(`glances.river.local`)"
      - "traefik.http.routers.glances.entrypoints=web"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"

  # Traefik - Reverse Proxy
  traefik:
    image: traefik:latest
    container_name: traefik
    ports:
      - "80:80"      # HTTP traffic for services
      - "8080:8080"  # Traefik dashboard
    environment:
      - TZ=${TZ}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_ROOT}/traefik:/etc/traefik
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=riverdale_network
      - --entrypoints.web.address=:80
      - --log.level=INFO
      - --accesslog=false
      - --providers.docker.watch=true
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.river.local`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # whoami - Simple service for testing Traefik
  whoami:
    image: traefik/whoami:latest
    container_name: whoami
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:80 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.river.local`)"
      - "traefik.http.routers.whoami.entrypoints=web"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"

  # DuckDNS - Dynamic DNS service for external access
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=${DUCKDNS_SUBDOMAINS}
      - TOKEN=${DUCKDNS_TOKEN}
      - UPDATE_IP=ipv4
      - LOG_FILE=false
    volumes:
      - ${CONFIG_ROOT}/duckdns:/config
    restart: unless-stopped
    networks:
      - riverdale_network
    healthcheck:
      test: ["CMD-SHELL", "grep -q 'OK' /config/duckdns.log || exit 1"]
      interval: 300s  # Check every 5 minutes
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  riverdale_network:
    name: riverdale_network
    driver: bridge
    ipam:
      config:
        - subnet: 172.19.0.0/16