# Docker Compose file for initial directory setup
# Run this ONCE before starting main services: docker-compose -f docker-compose.init.yml up
# This creates all required directories with proper permissions

services:
  # Init container to create required directories
  init-directories:
    image: alpine:latest
    container_name: init-directories
    volumes:
      - ${MEDIA_ROOT}:/media
      - ${DOWNLOADS_ROOT}:/downloads
      - ${CONFIG_ROOT}:/config
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    command: >
      sh -c "
        echo 'Creating required directories...'
        mkdir -p /media/movies /media/tv
        mkdir -p /downloads/complete/movies /downloads/complete/tv /downloads/complete/tv-sonarr /downloads/complete/radarr
        mkdir -p /downloads/incomplete
        mkdir -p /downloads/watch
        mkdir -p /config/jellyfin /config/sonarr /config/radarr /config/prowlarr /config/transmission /config/gluetun /config/watchtower /config/dashy /config/traefik /config/minecraft /config/windows /config/flood /config/duckdns
        echo 'Setting proper ownership and permissions...'
        chown -R \$${PUID}:\$${PGID} /media /downloads /config 2>/dev/null || true
        chmod -R 755 /media /downloads /config 2>/dev/null || true
        echo 'Ensuring correct ownership of critical directories...'
        chown -R \$${PUID}:\$${PGID} /downloads/complete/tv-sonarr /downloads/complete/radarr 2>/dev/null || true
        echo 'Setting execute permissions on media files for proper import...'
        find /downloads/complete -name '*.mp4' -o -name '*.mkv' -o -name '*.avi' -o -name '*.mov' | xargs chmod 644 2>/dev/null || true
        find /downloads/complete -type d | xargs chmod 755 2>/dev/null || true
        echo 'âœ… Directory structure ready!'
        echo ''
        echo 'You can now start the main services with:'
        echo '  docker-compose up -d'
        echo ''
      "
    user: "0:0"  # Run as root to ensure directory creation works
    restart: "no"

networks:
  riverdale_network:
    name: riverdale_network
    driver: bridge
    external: true  # Use existing network
